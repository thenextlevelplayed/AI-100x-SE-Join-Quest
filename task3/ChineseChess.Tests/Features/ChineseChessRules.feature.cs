// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ChineseChess.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Chinese Chess (象棋) Rules")]
    public partial class ChineseChess象棋RulesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ChineseChessRules.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Chinese Chess (象棋) Rules", @"  As a player
  I want to follow standard Chinese Chess rules
  So that I can play the game correctly

  We use (row, col) to indicate positions on a 9×10 board.
  Row 1 is Red’s bottom row; Row 10 is Black’s top row.
  Column 1 is the leftmost column from Red’s perspective.
  
  Each scenario sets up minimal conditions with relevant pieces.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the General within the palace (Legal)")]
        [NUnit.Framework.CategoryAttribute("General")]
        public void RedMovesTheGeneralWithinThePalaceLegal()
        {
            string[] tagsOfScenario = new string[] {
                    "General"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the General within the palace (Legal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
    testRunner.Given("the board is empty except for a Red General at (1, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
    testRunner.When("Red moves the General from (1, 5) to (1, 4)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
    testRunner.Then("the move is legal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the General outside the palace (Illegal)")]
        [NUnit.Framework.CategoryAttribute("General")]
        public void RedMovesTheGeneralOutsideThePalaceIllegal()
        {
            string[] tagsOfScenario = new string[] {
                    "General"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the General outside the palace (Illegal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
    testRunner.Given("the board is empty except for a Red General at (1, 6)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
    testRunner.When("Red moves the General from (1, 6) to (1, 7)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
    testRunner.Then("the move is illegal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generals face each other on the same file (Illegal)")]
        [NUnit.Framework.CategoryAttribute("General")]
        public void GeneralsFaceEachOtherOnTheSameFileIllegal()
        {
            string[] tagsOfScenario = new string[] {
                    "General"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generals face each other on the same file (Illegal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Piece",
                            "Position"});
                table1.AddRow(new string[] {
                            "Red General",
                            "(2, 4)"});
                table1.AddRow(new string[] {
                            "Black General",
                            "(8, 5)"});
#line 29
    testRunner.Given("the board has:", ((string)(null)), table1, "Given ");
#line hidden
#line 33
    testRunner.When("Red moves the General from (2, 4) to (2, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
    testRunner.Then("the move is illegal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Guard diagonally in the palace (Legal)")]
        [NUnit.Framework.CategoryAttribute("Guard")]
        public void RedMovesTheGuardDiagonallyInThePalaceLegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Guard"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Guard diagonally in the palace (Legal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
    testRunner.Given("the board is empty except for a Red Guard at (1, 4)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
    testRunner.When("Red moves the Guard from (1, 4) to (2, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
    testRunner.Then("the move is legal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Guard straight (Illegal)")]
        [NUnit.Framework.CategoryAttribute("Guard")]
        public void RedMovesTheGuardStraightIllegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Guard"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Guard straight (Illegal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
    testRunner.Given("the board is empty except for a Red Guard at (2, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
    testRunner.When("Red moves the Guard from (2, 5) to (2, 6)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
    testRunner.Then("the move is illegal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Rook along a clear rank (Legal)")]
        [NUnit.Framework.CategoryAttribute("Rook")]
        public void RedMovesTheRookAlongAClearRankLegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Rook"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Rook along a clear rank (Legal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
    testRunner.Given("the board is empty except for a Red Rook at (4, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
    testRunner.When("Red moves the Rook from (4, 1) to (4, 9)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
    testRunner.Then("the move is legal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Rook and attempts to jump over a piece (Illegal)")]
        [NUnit.Framework.CategoryAttribute("Rook")]
        public void RedMovesTheRookAndAttemptsToJumpOverAPieceIllegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Rook"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Rook and attempts to jump over a piece (Illegal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Piece",
                            "Position"});
                table2.AddRow(new string[] {
                            "Red Rook",
                            "(4, 1)"});
                table2.AddRow(new string[] {
                            "Black Soldier",
                            "(4, 5)"});
#line 62
    testRunner.Given("the board has:", ((string)(null)), table2, "Given ");
#line hidden
#line 66
    testRunner.When("Red moves the Rook from (4, 1) to (4, 9)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
    testRunner.Then("the move is illegal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Horse in an “L” shape with no block (Legal)")]
        [NUnit.Framework.CategoryAttribute("Horse")]
        public void RedMovesTheHorseInAnLShapeWithNoBlockLegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Horse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Horse in an “L” shape with no block (Legal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 73
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 74
    testRunner.Given("the board is empty except for a Red Horse at (3, 3)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 75
    testRunner.When("Red moves the Horse from (3, 3) to (5, 4)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
    testRunner.Then("the move is legal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Horse and it is blocked by an adjacent piece (Illegal)")]
        [NUnit.Framework.CategoryAttribute("Horse")]
        public void RedMovesTheHorseAndItIsBlockedByAnAdjacentPieceIllegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Horse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Horse and it is blocked by an adjacent piece (Illegal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Piece",
                            "Position"});
                table3.AddRow(new string[] {
                            "Red Horse",
                            "(3, 3)"});
                table3.AddRow(new string[] {
                            "Black Rook",
                            "(4, 3)"});
#line 80
    testRunner.Given("the board has:", ((string)(null)), table3, "Given ");
#line hidden
#line 84
    testRunner.When("Red moves the Horse from (3, 3) to (5, 4)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
    testRunner.Then("the move is illegal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Cannon like a Rook with an empty path (Legal)")]
        [NUnit.Framework.CategoryAttribute("Cannon")]
        public void RedMovesTheCannonLikeARookWithAnEmptyPathLegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Cannon"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Cannon like a Rook with an empty path (Legal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 92
    testRunner.Given("the board is empty except for a Red Cannon at (6, 2)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
    testRunner.When("Red moves the Cannon from (6, 2) to (6, 8)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
    testRunner.Then("the move is legal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Cannon and jumps exactly one screen to capture (Legal)")]
        [NUnit.Framework.CategoryAttribute("Cannon")]
        public void RedMovesTheCannonAndJumpsExactlyOneScreenToCaptureLegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Cannon"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Cannon and jumps exactly one screen to capture (Legal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Piece",
                            "Position"});
                table4.AddRow(new string[] {
                            "Red Cannon",
                            "(6, 2)"});
                table4.AddRow(new string[] {
                            "Black Soldier",
                            "(6, 5)"});
                table4.AddRow(new string[] {
                            "Black Guard",
                            "(6, 8)"});
#line 98
    testRunner.Given("the board has:", ((string)(null)), table4, "Given ");
#line hidden
#line 103
    testRunner.When("Red moves the Cannon from (6, 2) to (6, 8)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
    testRunner.Then("the move is legal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Cannon and tries to jump with zero screens (Illegal)")]
        [NUnit.Framework.CategoryAttribute("Cannon")]
        public void RedMovesTheCannonAndTriesToJumpWithZeroScreensIllegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Cannon"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Cannon and tries to jump with zero screens (Illegal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 107
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Piece",
                            "Position"});
                table5.AddRow(new string[] {
                            "Red Cannon",
                            "(6, 2)"});
                table5.AddRow(new string[] {
                            "Black Guard",
                            "(6, 8)"});
#line 108
    testRunner.Given("the board has:", ((string)(null)), table5, "Given ");
#line hidden
#line 112
    testRunner.When("Red moves the Cannon from (6, 2) to (6, 8)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
    testRunner.Then("the move is illegal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Cannon and tries to jump with more than one screen (Illegal)")]
        [NUnit.Framework.CategoryAttribute("Cannon")]
        public void RedMovesTheCannonAndTriesToJumpWithMoreThanOneScreenIllegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Cannon"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Cannon and tries to jump with more than one screen (Illegal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 116
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Piece",
                            "Position"});
                table6.AddRow(new string[] {
                            "Red Cannon",
                            "(6, 2)"});
                table6.AddRow(new string[] {
                            "Red Soldier",
                            "(6, 4)"});
                table6.AddRow(new string[] {
                            "Black Soldier",
                            "(6, 5)"});
                table6.AddRow(new string[] {
                            "Black Guard",
                            "(6, 8)"});
#line 117
    testRunner.Given("the board has:", ((string)(null)), table6, "Given ");
#line hidden
#line 123
    testRunner.When("Red moves the Cannon from (6, 2) to (6, 8)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
    testRunner.Then("the move is illegal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Elephant 2-step diagonal with a clear midpoint (Legal)")]
        [NUnit.Framework.CategoryAttribute("Elephant")]
        public void RedMovesTheElephant2_StepDiagonalWithAClearMidpointLegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Elephant"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Elephant 2-step diagonal with a clear midpoint (Legal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 131
    testRunner.Given("the board is empty except for a Red Elephant at (3, 3)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 132
    testRunner.When("Red moves the Elephant from (3, 3) to (5, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
    testRunner.Then("the move is legal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Elephant and tries to cross the river (Illegal)")]
        [NUnit.Framework.CategoryAttribute("Elephant")]
        public void RedMovesTheElephantAndTriesToCrossTheRiverIllegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Elephant"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Elephant and tries to cross the river (Illegal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 137
    testRunner.Given("the board is empty except for a Red Elephant at (5, 3)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 138
    testRunner.When("Red moves the Elephant from (5, 3) to (7, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
    testRunner.Then("the move is illegal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Elephant and its midpoint is blocked (Illegal)")]
        [NUnit.Framework.CategoryAttribute("Elephant")]
        public void RedMovesTheElephantAndItsMidpointIsBlockedIllegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Elephant"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Elephant and its midpoint is blocked (Illegal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 142
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Piece",
                            "Position"});
                table7.AddRow(new string[] {
                            "Red Elephant",
                            "(3, 3)"});
                table7.AddRow(new string[] {
                            "Black Rook",
                            "(4, 4)"});
#line 143
    testRunner.Given("the board has:", ((string)(null)), table7, "Given ");
#line hidden
#line 147
    testRunner.When("Red moves the Elephant from (3, 3) to (5, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 148
    testRunner.Then("the move is illegal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Soldier forward before crossing the river (Legal)")]
        [NUnit.Framework.CategoryAttribute("Soldier")]
        public void RedMovesTheSoldierForwardBeforeCrossingTheRiverLegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Soldier"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Soldier forward before crossing the river (Legal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 155
    testRunner.Given("the board is empty except for a Red Soldier at (3, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 156
    testRunner.When("Red moves the Soldier from (3, 5) to (4, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 157
    testRunner.Then("the move is legal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Soldier and tries to move sideways before crossing (Illegal)")]
        [NUnit.Framework.CategoryAttribute("Soldier")]
        public void RedMovesTheSoldierAndTriesToMoveSidewaysBeforeCrossingIllegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Soldier"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Soldier and tries to move sideways before crossing (Illegal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 160
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 161
    testRunner.Given("the board is empty except for a Red Soldier at (3, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 162
    testRunner.When("Red moves the Soldier from (3, 5) to (3, 4)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 163
    testRunner.Then("the move is illegal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Soldier sideways after crossing the river (Legal)")]
        [NUnit.Framework.CategoryAttribute("Soldier")]
        public void RedMovesTheSoldierSidewaysAfterCrossingTheRiverLegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Soldier"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Soldier sideways after crossing the river (Legal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 167
    testRunner.Given("the board is empty except for a Red Soldier at (6, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 168
    testRunner.When("Red moves the Soldier from (6, 5) to (6, 4)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 169
    testRunner.Then("the move is legal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red moves the Soldier and attempts to move backward after crossing (Illegal)")]
        [NUnit.Framework.CategoryAttribute("Soldier")]
        public void RedMovesTheSoldierAndAttemptsToMoveBackwardAfterCrossingIllegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Soldier"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red moves the Soldier and attempts to move backward after crossing (Illegal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 172
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 173
    testRunner.Given("the board is empty except for a Red Soldier at (6, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 174
    testRunner.When("Red moves the Soldier from (6, 5) to (5, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
    testRunner.Then("the move is illegal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red captures opponent\'s General and wins immediately (Legal)")]
        [NUnit.Framework.CategoryAttribute("Winning")]
        public void RedCapturesOpponentsGeneralAndWinsImmediatelyLegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Winning"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red captures opponent\'s General and wins immediately (Legal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 181
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Piece",
                            "Position"});
                table8.AddRow(new string[] {
                            "Red Rook",
                            "(5, 5)"});
                table8.AddRow(new string[] {
                            "Black General",
                            "(5, 8)"});
#line 182
    testRunner.Given("the board has:", ((string)(null)), table8, "Given ");
#line hidden
#line 186
    testRunner.When("Red moves the Rook from (5, 5) to (5, 8)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 187
    testRunner.Then("Red wins immediately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Red captures a non-General piece and the game continues (Legal)")]
        [NUnit.Framework.CategoryAttribute("Winning")]
        public void RedCapturesANon_GeneralPieceAndTheGameContinuesLegal()
        {
            string[] tagsOfScenario = new string[] {
                    "Winning"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Red captures a non-General piece and the game continues (Legal)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 190
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Piece",
                            "Position"});
                table9.AddRow(new string[] {
                            "Red Rook",
                            "(5, 5)"});
                table9.AddRow(new string[] {
                            "Black Cannon",
                            "(5, 8)"});
#line 191
    testRunner.Given("the board has:", ((string)(null)), table9, "Given ");
#line hidden
#line 195
    testRunner.When("Red moves the Rook from (5, 5) to (5, 8)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 196
    testRunner.Then("the game is not over just from that capture", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
